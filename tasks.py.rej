diff a/tasks.py b/tasks.py	(rejected hunks)
@@ -1,8 +1,8 @@
 from pathlib import Path
 from typing import Optional
 
+from attr import dataclass
 from invoke import Context, Result, task
-from dataclasses import dataclass
 
 
 def echo_header(msg: str):
@@ -41,15 +49,72 @@ def setup_venv(
     venv_name = f'.venv{python_version.replace(".", "")}'
 
     if not Path(venv_name).exists():
-        echo_header(f"{Emo.DO} Creating virtual environment for {Emo.PY}{python_version}")
+        echo_header(f"{Emo.STARTING} Creating virtual environment")
         c.run(f"python{python_version} -m venv {venv_name}")
-        print(f"{Emo.GOOD} Virtual environment created")
+        print(f"{Emo.SUCCESS} Virtual environment created")
     else:
-        print(f"{Emo.GOOD} Virtual environment already exists")
+        print(f"{Emo.SUCCESS} Virtual environment already exists")
 
     c.run(f"source {venv_name}/bin/activate")
 
 
+@task
+def install(c: Context):
+    echo_header(f"{Emo.STARTING} Installing project")
+    c.run("pip install -e '.[dev,tests]'")
+
+
+@task
+def update(c: Context):
+    echo_header(f"{Emo.STARTING} Updating project")
+    c.run("pip install --upgrade -e '.[dev,tests]'")
+
+
+@task
+def test(c: Context, min_latency: bool = True):
+    """Run tests.
+
+    Args:
+        min_latency (bool): If false, go for maximum throughput. If true, go for minimum latency.
+    """
+    echo_header(f"{Emo.TEST} Running tests")
+
+    if min_latency:
+        n = ""
+        plugins = "-p no:cov -p no:xdist -p no:instafail -p no:xdist"
+    else:
+        n = "-n auto "
+
+    test_result: Result = c.run(
+        f"pytest {n}-rfE --failed-first {plugins} --disable-warnings -q",
+        warn=True,
+        pty=True,
+    )
+
+    # If "failed" in the pytest results
+    if "failed" in test_result.stdout:
+        print("\n\n\n")
+        echo_header("Failed tests")
+
+        # Get lines with "FAILED" in them from the .pytest_results file
+        failed_tests = [
+            line
+            for line in Path("tests/.pytest_results").read_text().splitlines()
+            if line.startswith("FAILED")
+        ]
+
+        for line in failed_tests:
+            # Remove from start of line until /test_
+            line_sans_prefix = line[line.find("test_") :]
+
+            # Keep only that after ::
+            line_sans_suffix = line_sans_prefix[line_sans_prefix.find("::") + 2 :]
+            print(f"FAILED {Emo.FAILURE} #{line_sans_suffix}     ")
+
+    if "failed" in test_result.stdout or "error" in test_result.stdout: 
+        exit(0)
+
+
 def _add_commit(c: Context, msg: Optional[str] = None):
     print("ðŸ”¨ Adding and committing changes")
     c.run("git add .")
@@ -139,22 +197,37 @@ def update_pr(c: Context):
             c.run("gh pr view --web", pty=True)
 
 
-def exit_if_error_in_stdout(result: Result):
-    if "error" in result.stdout:
-        exit(0)
+def create_pr(c: Context):
+    c.run(
+        "gh pr create --web",
+        pty=True,
+    )
 
 
-def pre_commit(c: Context):
-    """Run pre-commit checks."""
-    
-    # Essential to have a clean working directory before pre-commit to avoid committing
-    # heterogenous files under a "style: linting" commit
+def branch_exists_on_remote(c: Context) -> bool:
+    branch_name = Path(".git/HEAD").read_text().split("/")[-1].strip()
+
+    branch_exists_result: Result = c.run(
+        f"git ls-remote --heads origin {branch_name}",
+        hide=True,
+    )
+
+    return branch_name in branch_exists_result.stdout
+
+
+@task
+def lint(c: Context):
     if is_uncommitted_changes(c):
         print(
-            f"{Emo.WARN} Your git working directory is not clean. Stash or commit before running pre-commit.",
+            f"{Emo.WARNING} Your git working directory is not clean. Stash or commit before linting.",
         )
         exit(0)
-        
+
+    pre_commit(c)
+    mypy(c)
+
+
+def pre_commit(c: Context):
     echo_header(f"{Emo.CLEAN} Running pre-commit checks")
     pre_commit_cmd = "pre-commit run --all-files"
     result = c.run(pre_commit_cmd, pty=True, warn=True)
@@ -164,76 +237,16 @@ def pre_commit(c: Context):
     if "fixed" in result.stdout or "reformatted" in result.stdout:
         _add_commit(c, msg="style: linting")
 
-        print(f"{Emo.DO} Fixed errors, re-running pre-commit checks")
+        print(f"{Emo.APPLY} Fixed errors, re-running pre-commit checks")
         second_result = c.run(pre_commit_cmd, pty=True, warn=True)
         exit_if_error_in_stdout(second_result)
 
 
-def mypy(c: Context):
-    echo_header(f"{Emo.CLEAN} Running mypy")
-    c.run("mypy .", pty=True)
-
-
-@task
-def install(c: Context):
-    echo_header(f"{Emo.DO} Installing project")
-    c.run("pip install -e '.[dev,tests]'")
-
-
-@task
-def setup(c: Context, python_version: str = "3.9"):
-    git_init(c)
-    setup_venv(c, python_version=python_version)
-    install(c)
-
-
-@task
-def update(c: Context):
-    echo_header(f"{Emo.DO} Updating project")
-    c.run("pip install --upgrade -e '.[dev,tests]'")
-
-
-@task
-def test(c: Context):
-    echo_header(f"{Emo.TEST} Running tests")
-    test_result: Result = c.run(
-        "pytest -n auto -rfE --failed-first -p no:typeguard -p no:cov --disable-warnings -q",
-        warn=True,
-        pty=True,
-    )
-
-    # If "failed" in the pytest results
-    if "failed" in test_result.stdout:
-        print("\n\n\n")
-        echo_header("Failed tests")
-
-        # Get lines with "FAILED" in them from the .pytest_results file
-        failed_tests = [
-            line
-            for line in Path("tests/.pytest_results").read_text().splitlines()
-            if line.startswith("FAILED")
-        ]
-
-        for line in failed_tests:
-            # Remove from start of line until /test_
-            line_sans_prefix = line[line.find("test_") :]
-
-            # Keep only that after ::
-            line_sans_suffix = line_sans_prefix[line_sans_prefix.find("::") + 2 :]
-            print(f"FAILED {Emo.FAIL} #{line_sans_suffix}     ")
-
+def exit_if_error_in_stdout(result: Result):
+    if "error" in result.stdout:
         exit(0)
 
-@task
-def lint(c: Context):
-    pre_commit(c)
-    mypy(c)
-
 
-@task
-def pr(c: Context):
-    add_and_commit(c)
-    lint(c)
-    test(c)
-    update_branch(c)
-    update_pr(c)
+def mypy(c: Context):
+    echo_header(f"{Emo.CLEAN} Running mypy")
+    c.run("mypy .", pty=True)
