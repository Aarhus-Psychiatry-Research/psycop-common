from pathlib import Path
from typing import Sequence

from pydantic import BaseModel

from psycop.common.model_training_v2.loggers.base_logger import BaselineLogger
from psycop.common.model_training_v2.training_method.base_training_method import (
    TrainingMethod,
)

from .presplit_preprocessing.step import PresplitStep


class BaselineSchema(BaseModel):
    experiment_path: Path
    logger: BaselineLogger
    training_method: TrainingMethod


def train_baseline_model(resolved_config: BaselineSchema) -> float:
    cfg = resolved_config

    cfg.logger.log_config(
        cfg.dict()
    )  # Dict handling, might have to be flattened depending on the logger. Probably want all loggers to take flattened dicts.

    result = cfg.training_method.train()
    result.eval_dataset.to_disk(path=resolved_config.experiment_path)

    return result.metric
