[project_info]
experiment_path = "E:/shared_resources/t2d_extended/training/"

[logger]
@loggers = "multi_logger"

[logger.*.terminal]
@loggers = "terminal_logger"

[logger.*.mlflow]
@loggers = "mlflow_logger"
experiment_name = "T2D-extended-2025"
postpone_run_creation_to_first_log = True

[logger.*.disk]
@loggers = "disk_logger"
run_path = ${project_info.experiment_path}${logger.*.mlflow.experiment_name}

[trainer]
@trainers = "crossval_trainer"
uuid_col_name = "prediction_time_uuid"
outcome_col_name = "outc_t2d_value_within_0_to_730_days_max_fallback_0"
n_splits = 5
group_col_name = "dw_ek_borger"

[trainer.metric]
@metrics = "binary_auroc"

[trainer.training_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/t2d_extended/feature_set/flattened_datasets/t2d_extended_feature_set_2025/t2d_extended_feature_set_2025.parquet"]
validate_on_init = False

#################
# Preprocessing #
#################
[trainer.preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"

# Filter rows
[trainer.preprocessing_pipeline.*.split_filter]
@preprocessing = "outcomestratified_split_filter"
splits_to_keep = ["train", "val", "test"]
id_col_name = "dw_ek_borger"

[trainer.preprocessing_pipeline.*.sufficient_lookahead_filter]
@preprocessing = "window_filter"
timestamp_col_name = "timestamp"
n_days = 730
direction = "ahead"

[trainer.preprocessing_pipeline.*.sufficient_lookbehind_filter]
@preprocessing = "window_filter"
timestamp_col_name = "timestamp"
n_days = 730
direction = "behind"

# Filter columns
## Predictors
[trainer.preprocessing_pipeline.*.hba1c_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred.+within.+"
keep_matching = ".+_(hba1c)_.+"

[trainer.preprocessing_pipeline.*.aggregation_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred.+within.+"
keep_matching = ".+_(mean)_.+"

[trainer.preprocessing_pipeline.*.lookbehind_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred.+within.+"
keep_matching = ".+_(730)_.+"

## Outcomes
[trainer.preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+730.+"

## Remove timestamp columns
[trainer.preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

# Validate column assumptions
[trainer.preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"
column_names = ["prediction_time_uuid"]

[trainer.preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"
column_expectations = [["outc_", 1], ["prediction_timestamp", 0]]

#############
# Estimator #
#############
[trainer.task.task_pipe.sklearn_pipe.*.imputer]
@estimator_steps = "simple_imputation"
strategy = "mean"

[trainer.task.task_pipe.sklearn_pipe.*.scaler]
@estimator_steps = "standard_scaler"

[trainer.task.task_pipe.sklearn_pipe.*.model]
@estimator_steps = "xgboost"
alpha = 2.256986932400586e-06
reg_lambda = 8.637996820440683e-07
max_depth = 2
learning_rate = 0.05244905247247878
gamma = 0.00023457855210999137
grow_policy = lossguide
n_estimators = 238

########
# Task #
########
[trainer.task]
@tasks = "binary_classification"

[trainer.task.task_pipe]
@task_pipelines = "binary_classification_pipeline"

[trainer.task.task_pipe.sklearn_pipe]
@task_pipelines = "pipe_constructor"


