[project_info]
experiment_path = "E:/shared_resources/coercion/training_v2/"

[logger]
@loggers = "multi_logger"

[logger.*.terminal]
@loggers = "terminal_logger"

[logger.*.mlflow]
@loggers = "mlflow_logger"
experiment_name = "restraint_text_crossval"
postpone_run_creation_to_first_log = True

[trainer]
@trainers = "crossval_trainer"
uuid_col_name = "prediction_time_uuid"
outcome_col_name = "outc__value_within_0_to_2_days_bool_fallback_0"
n_splits = 5
group_col_name = "dw_ek_borger"

[trainer.metric]
@metrics = "binary_auroc"

[trainer.training_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/coercion/text/all_relevant_dfm-encoder-large_structured.parquet"]


[trainer.preprocessing_pipeline.*.regional_data_filter]
@preprocessing = "regional_data_filter"
splits_to_keep = ["train", "val"]


#################
# Preprocessing #
#################
[trainer.preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"

# Filter rows


# Filter columns
## Predictors
[trainer.preprocessing_pipeline.*.lookbehind_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred_.+"
keep_matching = ".+(1|30|730|adm_day_count|age_years|sex_female).+"

[trainer.preprocessing_pipeline.*.aggregation_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred_.+"
keep_matching = ".+_(mean|boolean|summed|maximum|change_per_day|adm_day_count|age_years|sex_female)_.+"

[trainer.preprocessing_pipeline.*.subset_blacklist]
@preprocessing = "regex_column_blacklist"
* = ["pred_.+(_po_|_im_|_pn_|_p_|_lab_results_).+"]

## Outcomes
[trainer.preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+value.+"

# [trainer.preprocessing_pipeline.*.regex_meta_blacklist]
# @preprocessing = "regex_column_blacklist"
# * = ["pred_.+tfidf.+"]

## Remove timestamp columns
[trainer.preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

# Validate column assumptions
[trainer.preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"
column_names = ["prediction_time_uuid", "pred_age_years_fallback_nan", "pred_sex_female_fallback_nan"]

[trainer.preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"
column_expectations = [["outc_", 1], ["prediction_timestamp", 0]]

#############
# Estimator #
#############
# [trainer.task.task_pipe.sklearn_pipe.*.model]
# @estimator_steps_suggesters = "lightgbm_suggester"

########
# Task #
########
[trainer.task]
@tasks = "binary_classification"

[trainer.task.task_pipe]
@task_pipelines = "binary_classification_pipeline"

[trainer.task.task_pipe.sklearn_pipe]
@task_pipelines = "pipe_constructor"

[trainer.task.task_pipe.sklearn_pipe.*.model]
@estimator_steps = "xgboost"

# [trainer.task.task_pipe.sklearn_pipe.*.model]
# @estimator_steps = "xgboost"
# alpha = 0
# reg_lambda = 1
# max_depth = 3
# learning_rate = 0.3
# gamma = 0
# tree_method = "gpu_hist",
# n_estimators = 100