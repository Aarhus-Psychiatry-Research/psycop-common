[project_info]
experiment_path = /.

[logger]
@loggers = "multi_logger"

[logger.terminal]
@loggers = "terminal_logger"

[logger.mlflow]
@loggers = "mlflow_logger"
experiment_name = "baseline_v2_cvd"

[trainer]
@trainers = "crossval_trainer"
outcome_col_name = "outc_score2_cvd_within_1825_days_maximum_fallback_0_dichotomous"
n_splits = 5
group_col_name = "dw_ek_borger"

[trainer.metric]
@metrics = "binary_auroc"

[trainer.training_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/cvd/feature_set/flattened_datasets/train.parquet", "E:/shared_resources/cvd/feature_set/flattened_datasets/val.parquet"]

#################
# Preprocessing #
#################
[trainer.preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"

# Filter rows
[trainer.preprocessing_pipeline.*.age_filter]
@preprocessing = "age_filter"
min_age = 18
max_age = 99
age_col_name = ${trainer.preprocessing_pipeline.*.columns_exist.*.age}

# Filter columns
## Predictors
[trainer.preprocessing_pipeline.*.layer_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred_.+layer.+"
keep_matching = ".+_layer_(1).+"

[trainer.preprocessing_pipeline.*.aggregation_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "pred_.+layer.+"
keep_matching = ".+_(mean)_.+"

## Outcomes
[trainer.preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+1825.+"

## Remove timestamp columns
[trainer.preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

# Validate column assumptions
[trainer.preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"

[trainer.preprocessing_pipeline.*.columns_exist.*]
pred_time_uuid = "prediction_time_uuid"
age = "pred_age_in_years"
sex = "pred_sex_female"

[trainer.preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"

[trainer.preprocessing_pipeline.*.column_prefix_count_expectation.*]
outcome_prefix = ["outc_", 1]
prediction_timestamp = ["prediction_timestamp", 0]

########
# Task #
########
[trainer.task]
@tasks = "binary_classification"
pred_time_uuid_col_name = ${trainer.preprocessing_pipeline.*.columns_exist.*.pred_time_uuid}

[trainer.task.task_pipe]
@task_pipelines = "binary_classification_pipeline"

[trainer.task.task_pipe.sklearn_pipe]
@task_pipelines = "pipe_constructor"

[trainer.task.task_pipe.sklearn_pipe.*.model]
@estimator_steps = "xgboost"

