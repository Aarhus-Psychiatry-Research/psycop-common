[logger]
@loggers = "multi_logger"

[logger.*.mlflow_logger]
@loggers = "mlflow_logger"
experiment_name = "sczbp/test_scz_structured_text"
postpone_run_creation_to_first_log = "True"

[trainer]
@trainers = "split_trainer_separate_preprocessing"
training_outcome_col_name = "outc_scz_within_1825_days_fallback_0"
validation_outcome_col_name = "outc_scz_within_1825_days_fallback_0"
uuid_col_name = "prediction_time_uuid"
group_col_name = "dw_ek_borger"
metric = {"@metrics":"binary_auroc"}


[trainer.training_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/scz_bp/flattened_datasets/l1_l4-lookbehind_183_365_730-all_relevant_tfidf_1000_lookbehind_730_individual_outcomes.parquet"]

[trainer.validation_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/scz_bp/flattened_datasets/l1_l4-lookbehind_183_365_730-all_relevant_tfidf_1000_lookbehind_730_individual_outcomes.parquet"]


### Training preprocessing
[trainer.training_preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.training_preprocessing_pipeline.*.split_filter]
@preprocessing = "regional_data_filter"
splits_to_keep = ["train","val"]
regional_move_df = null
timestamp_col_name = "timestamp"
id_col_name = "dw_ek_borger"
region_col_name = "region"
timestamp_cutoff_col_name = "first_regional_move_timestamp"

[trainer.training_preprocessing_pipeline.*.lookahead_distance_filter]
@preprocessing = "window_filter"
n_days = 1825
direction = "ahead"
timestamp_col_name = "timestamp"

[trainer.training_preprocessing_pipeline.*.age_filter]
@preprocessing = "age_filter"
min_age = 15
max_age = 60
age_col_name = "pred_age_in_years"

[trainer.training_preprocessing_pipeline.*.regex_meta_blacklist]
@preprocessing = "regex_column_blacklist"
* = ["meta_.*"]

[trainer.training_preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"
column_names = ["pred_age_in_years","prediction_time_uuid"]

[trainer.training_preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+scz.+"

[trainer.training_preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

[trainer.training_preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"
column_expectations = [["outc_",1]]

[trainer.training_preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"

### Testing preprocessing
[trainer.validation_preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.validation_preprocessing_pipeline.*.split_filter]
@preprocessing = "regional_data_filter"
splits_to_keep = ["test"]
regional_move_df = null
timestamp_col_name = "timestamp"
id_col_name = "dw_ek_borger"
region_col_name = "region"
timestamp_cutoff_col_name = "first_regional_move_timestamp"

[trainer.validation_preprocessing_pipeline.*.lookahead_distance_filter]
@preprocessing = "window_filter"
n_days = 1825
direction = "ahead"
timestamp_col_name = "timestamp"

[trainer.validation_preprocessing_pipeline.*.age_filter]
@preprocessing = "age_filter"
min_age = 15
max_age = 60
age_col_name = "pred_age_in_years"

[trainer.validation_preprocessing_pipeline.*.regex_meta_blacklist]
@preprocessing = "regex_column_blacklist"
* = ["meta_.*"]

[trainer.validation_preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"
column_names = ["pred_age_in_years","prediction_time_uuid"]

[trainer.validation_preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+scz.+"

[trainer.validation_preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

[trainer.validation_preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"
column_expectations = [["outc_",1]]

[trainer.validation_preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"


### Task and model
[trainer.task]
@tasks = "binary_classification"

[trainer.task.task_pipe]
@task_pipelines = "binary_classification_pipeline"

[trainer.task.task_pipe.sklearn_pipe]
@task_pipelines = "pipe_constructor"

[trainer.task.task_pipe.sklearn_pipe.*.imputer]
@estimator_steps = "simple_imputation"
strategy = "mean"

[trainer.task.task_pipe.sklearn_pipe.*.model]
@estimator_steps = "xgboost"
n_estimators = 1129
alpha = 0.0056866644
reg_lambda = 0.003136
max_depth = 3
learning_rate = 0.0105324295
gamma = 0.0003864015
