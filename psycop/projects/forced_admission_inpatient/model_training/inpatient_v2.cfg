[logger]
@loggers = "multi_logger"

[logger.*.terminal]
@loggers = "terminal_logger"

[logger.*.mlflow]
@loggers = "mlflow_logger"
experiment_name = "inpatient_v2"
postpone_run_creation_to_first_log = True

[trainer]
@trainers = "crossval_trainer"
uuid_col_name = "prediction_time_uuid"
outcome_col_name = "outc_forced_admissions_within_180_days_maximum_fallback_0"
n_splits = 5
group_col_name = "dw_ek_borger"

[trainer.metric]
@metrics = "binary_auroc"

[trainer.training_data]
@data = "parquet_vertical_concatenator"
paths = ["E:/shared_resources/forced_admissions_inpatient/flattened_datasets/full_feature_set_with_sentence_transformers_and_tfidf_750/train.parquet", "E:/shared_resources/forced_admissions_inpatient/flattened_datasets/full_feature_set_with_sentence_transformers_and_tfidf_750/val.parquet"]
validate_on_init = False

#################
# Preprocessing #
#################
[trainer.preprocessing_pipeline]
@preprocessing = "baseline_preprocessing_pipeline"

[trainer.preprocessing_pipeline.*.bool_to_int]
@preprocessing = "bool_to_int"

# Filter rows
[trainer.preprocessing_pipeline.*.sufficient_lookahead_filter]
@preprocessing = "window_filter"
timestamp_col_name = "timestamp"
n_days = 180
direction = "ahead"

[trainer.preprocessing_pipeline.*.sufficient_lookbehind_filter]
@preprocessing = "window_filter"
timestamp_col_name = "timestamp"
n_days = 365
direction = "behind"

# Filter columns
## Outcomes
[trainer.preprocessing_pipeline.*.outcome_selector]
@preprocessing = "filter_columns_within_subset"
subset_rule = "outc_.+"
keep_matching = ".+180.+"

## Remove timestamp columns
[trainer.preprocessing_pipeline.*.temporal_col_filter]
@preprocessing = "temporal_col_filter"

# Validate column assumptions
[trainer.preprocessing_pipeline.*.columns_exist]
@preprocessing = "column_exists_validator"
column_names = ["prediction_time_uuid"]

[trainer.preprocessing_pipeline.*.column_prefix_count_expectation]
@preprocessing = "column_prefix_count_expectation"
column_expectations = [["outc_", 1], ["prediction_timestamp", 0]]

#############
# Estimator #
#############
[trainer.task.task_pipe.sklearn_pipe.*.scaler]
@estimator_steps = "standard_scaler"

[trainer.task.task_pipe.sklearn_pipe.*.model]
@estimator_steps = "xgboost"
alpha = 0.06
reg_lambda = 0.396
max_depth = 2
learning_rate = 0.038
gamma = 0.0002
grow_policy = depthwise
n_estimators = 210

########
# Task #
########
[trainer.task]
@tasks = "binary_classification"

[trainer.task.task_pipe]
@task_pipelines = "binary_classification_pipeline"

[trainer.task.task_pipe.sklearn_pipe]
@task_pipelines = "pipe_constructor"


