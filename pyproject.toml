[tool.poetry]
name = "psycopt2d"
version = "0.0.0"
description = "Training scripts for the psycop-t2d project"
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
pandas = ">=1.4.3,<1.5.0"
scikit-learn = ">=1.1.1,<1.2.0"
xgboost = ">=1.6.1,<1.7.0"
hydra-core = ">=1.1.13,<1.3.0"
plotly = ">=5.8.2,<5.9.0"
matplotlib = ">=3.5.2,<3.6.0"
wandb = ">=0.12.21,<0.13.0"
psycopmlutils = {git = "https://github.com/Aarhus-Psychiatry-Research/psycop-ml-utils.git", rev = "main"}
tabulate = ">=0.8.10,<0.9.0"
optuna = ">=2.10.1,<2.11.0"
altair = ">=4.2.0,<4.3.0"
altair-saver = ">=0.5.0,<0.6.0"
hydra-optuna-sweeper = ">=1.2.0,<1.3.0"
hydra-joblib-launcher = ">=1.2.0, <1.3.0"
selenium = ">=4.2.0,<4.6.0"

# pandoc = "^2.2" not compatible with PEP517, which is required for poetry install. Disabled for now: https://github.com/boisgera/pandoc/pull/49
# interpret = ">=0.2.7,<0.3.0" Disabled becuase of errors with github actions. 
# See https://github.com/Aarhus-Psychiatry-Research/psycop-t2d/pull/194 for thoughts on root cause


[tool.poetry.dev-dependencies]
pre-commit = ">=2.19.0,<2.19.1"
pytest = ">=7.1.2,<7.1.3"
pytest-cov = ">=3.0.0,<4.0.1"
black = ">=22.3.0,<22.4.0"
flake8 = ">=4.0.1,<4.1.0"
pytest-xdist = "^2.5.0"
mypy = "^0.971"
setuptools = ">=65.3.0,<65.5.0"

[build-system]
requires = ["poetry-core>=1.0.0", "pip"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "**/tests/*",
    "**/_vendorized/*",
    "**/about.py",
]

exclude_lines = [
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __unicode__",
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.isort]
known_third_party = ["wandb"]

[tool.mypy]
ignore_missing_imports = true

[tool.semantic_release]
branch = "main"
version_variable = [
    "pyproject.toml:version"
]
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"

[tool.pyright]