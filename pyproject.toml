[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "psycop"
version = "0.67.0"
authors = ["Martin Bernstorff <martinbernstorff@gmail.com>"]
description = "PSYCOP"
classifiers = [
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10"
]

[tool.poetry.dependencies]
python = ">=3.9,<3.11"
pandas = ">=1.4.0,<2.1.0"
xgboost = ">=1.6.1,<1.8.0"
hydra-core= ">=1.1.13,<1.4.0"
matplotlib = ">=3.5.2,<3.8.0"
wandb = ">=0.12.21,<0.16.0"
tabulate = ">=0.8.10,<0.10.0"
optuna = ">=2.10.1,<3.2.0"
hydra-optuna-sweeper=">=1.2.0,<1.3.0"
hydra-joblib-launcher=">=1.2.0, <1.3.0"
pyarrow = ">=9.0.0"
Random-Word=">=1.0.11"
Levenshtein = ">=0.20.0, <0.22.0"
wasabi = ">=0.9.1"
scikit-learn = ">=1.1.2,<1.3.0"
deepchecks = ">=0.8.0"
dill = ">=0.3.0"
SQLAlchemy = ">=1.4.41, <2.0.11"
pyodbc = ">=4.0.34, <4.0.40"
pydantic = ">=1.9.0"
psutil = ">=5.9.1, <6.0.0"
catalogue = ">=2.0.0"
numpy = ">=1.23.3"
protobuf = "<=3.20.3" # Other versions give errors with pytest, super weird!
plotnine = "0.10.1"
scipy = "1.10.1"
# timeseriesflattener
# psycopmlutils
# polars
# tableone
# shap
timeseriesflattener = "^0.26.0"
psycopmlutils = "^0.11.0"
polars = "^0.17.12"
tableone = "^0.8.0"
shap = "^0.41.0"


[tool.poetry.group.dev.dependencies]
cruft = ">=2.0.0"
pyright = "1.1.305"
ruff = "0.0.265"
pre-commit = ">=3.0.0"
pandas-stubs = ">=2.0.0.0"
invoke = "^2.0.0"

[tool.poetry.group.tests.dependencies]
pytest = ">=7.1.3,<7.4.0"
pytest-cov = ">=3.0.0,<4.1.0"
pytest-xdist = ">=3.0.0,<3.3.0"
pytest-sugar = ">=0.9.4,<0.10.0"
tox = ">=4.0.0"


[project.license]
file = "LICENSE"
name = "MIT"

[project.optional-dependencies]
docs = [
  "sphinx>=5.3.0,<7.1.0",
  "furo>=2022.12.7,<2023.3.28",  # theme
  "sphinx-copybutton>=0.5.1,<0.5.3",
  "sphinxext-opengraph>=0.7.3,<0.8.3",
  "sphinx_design>=0.3.0,<0.4.2",
  "sphinx_togglebutton>=0.2.3,<0.4.0",
  "myst-nb>=0.6.0,<1.17.0",  # for rendering notebooks
  "jupyter>=1.0.0,<1.1.0",  # for tutorials
]
text = [
  "transformers>=4.22.2, <5.0.0",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
homepage = "https://github.com/Aarhus-Psychiatry-Research/psycop-common"
repository = "https://github.com/Aarhus-Psychiatry-Research/psycop-common"
documentation = "https://Aarhus-Psychiatry-Research.github.io/psycop-common/"

[tool.pyright]
include = ["src/psycop"]
exclude = ["**/.*venv*", ".tox", "build"]
pythonPlatform = "Darwin"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "C4",
  "COM",
  "D417",
  "E",
  "ERA",
  "F",
  "I",
  "ICN",
  "NPY001",
  "PD002",
  "PIE",
  "PLE",
  "PLW",
  "PT",
  "UP",
  "Q",
  "PTH",
  "RSE",
  "RET",
  "RUF",
  "SIM",
  "W"
]
ignore = [
  "ANN101",
  "ANN401",
  "E402",
  "E501",
  "F401",
  "F841",
  "RET504"
]
ignore-init-module-imports = true
# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = ["ERA"]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__init__.py",
  "docs/conf.py",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.isort]
known-third-party = ["wandb"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.semantic_release]
branch = "main"
version_variable = [
  "pyproject.toml:version"
]
upload_to_pypi = false
upload_to_release = false
build_command = "python -m pip install build; python -m build"

[tool.setuptools]
include-package-data = true

[tool.pytest.ini_options]
markers = [
  "pre_push_test: Tests run on push. Should be as minimal as possible to maintain fast push speeds."
]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true

[testenv:{type}]
description: run type checks
use_develop = true
allowlist_externals = pyright, poetry
commands_pre =
    poetry install --no-root --sync
commands =
  pyright --stats
"""
